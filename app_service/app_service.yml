name:  $(TeamProject)_$(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)  

trigger:
- master

variables:
  StatefileContext: $(System.TeamProject)_$(Build.DefinitionName)_$(Build.Repository.Name)_$(Build.SourceBranchName)
  Subscription: AzureSP

stages:
- stage: CI
  displayName: 'Build'
  jobs:
  - job: Build
    displayName: 'Create app_service artifact'
    pool: private
    steps:

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
        addToPath: true
        architecture: 'x64'

    - script: python -m pip install --upgrade pip setuptools wheel pytest pylint
      displayName: 'Install tools'

    - script: 'pytest -rs $(System.DefaultWorkingDirectory)/ci/test_file_has_no_pylint_errors.py --junitxml=$(System.DefaultWorkingDirectory)/test-pylint.xml'
      displayName: 'Run Pytest extract'
      continueOnError: true

    - task: PublishTestResults@2
      displayName: 'Publish Test Results **/TEST-*.xml'
      inputs:
        failTaskOnFailedTests: true

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/app_service/python'
        includeRootFolder: false
        archiveFile: $(System.DefaultWorkingDirectory)/app_service/azure_function.zip  

    - publish: $(System.DefaultWorkingDirectory)/app_service
      artifact: drop

- stage: dev  
  displayName: 'deploy dev'
  variables:
  - group: dev-variables

  jobs:
  - deployment: dev
    environment: dev
    pool: 
      name: private
    strategy: 
      runOnce:
        preDeploy:
          steps:
          - download: current
            artifact: drop

        deploy:
          steps:
          - template: ../templates/terraform-steps.yml
            parameters:
              backendServiceArm: $(Subscription)
              workingDirectory: $(Pipeline.Workspace)/drop/tf
              backendAzureRmResourceGroupName: $(Tf.ResourceGroup)
              backendAzureRmStorageAccountName: $(Tf.StorageAccount)
              backendAzureRmContainerName: $(Tf.Container)
              environment: 'dev'
              statefileContext: $(StatefileContext)

          - task: raul-arrieta.terraform-outputs.terraform-outputs.terraform-outputs@0
            displayName: 'Terraform Outputs'
            inputs:
              workingDirectory: $(Pipeline.Workspace)/drop/tf
              variablePrefix: tf.

          # - task: AzureFunctionApp@1 
          #   inputs:
          #     azureSubscription: $(Subscription)
          #     appType: functionAppLinux
          #     appName: $(tf.app_name)
          #     package: $(Pipeline.Workspace)/drop/azure_function.zip
          #     deployToSlotOrASE: false
          #     resourceGroupName: $(tf.resource_group_name)


          # Deploy using Azure App Service Deploy - Webdeployment
          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure App Service Deploy: python'
            inputs:
              azureSubscription: $(Subscription)
              appType: functionAppLinux
              WebAppName:  $(tf.app_name)
              packageForLinux: $(Pipeline.Workspace)/drop/azure_function.zip
              enableCustomDeployment: true
              DeploymentType: runFromZip    
              TakeAppOfflineFlag: false
              ExcludeFilesFromAppDataFlag: false
              RenameFilesFlag: false
